{"version":3,"sources":["startPage.js","gameRoom.js","App.js","serviceWorker.js","index.js"],"names":["startPage","startGame","connectTogame","className","onClick","type","placeholder","Place","places","takePlace","userId","place","changeName","changeStatusOnReady","handleClick","checkPlayersReadiness","NotReadyPlayer","autocomplete","readyPlayer","name","id","readinessStatus","bind","undefined","Game","e","target","classList","contains","currentTarget","style","border","this","props","gameId","role","Component","DEFAULT_STATE","status","readinessPlayersToStart","App","a","fetch","method","response","json","game","_status","_places","setState","connectToGame","document","querySelector","value","player","state","headers","body","JSON","stringify","newName","console","log","giveRoleResponse","showRole","switchForShowRole","callShowRole","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.342b5214.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/startPage.css'\r\n\r\nfunction startPage(startGame, connectTogame) {\r\n return (\r\n<div className=\"start-box\">\r\n  <h1 className=\"start-header\">Hello, welcome to mafia game</h1>\r\n  <div className=\"start-buttons\">\r\n       <button className=\"start-game\" onClick={startGame}>Start Game</button>\r\n       <input type=\"text\" className=\"text-gameId\" placeholder=\"write the id of game here\"></input>\r\n       <button className=\"connect-to-game\" onClick={connectTogame}>Connect to game</button>\r\n  </div>\r\n</div>\r\n );\r\n}\r\n export default startPage;\r\n\r\n","import React, {Component} from 'react';\r\nimport \"./css/gameRoom.css\"\r\n\r\n\r\nfunction Place ({places, takePlace, userId, place, changeName, changeStatusOnReady, handleClick, checkPlayersReadiness}) {\r\nconst NotReadyPlayer = <div className=\"box-player\" onClick={handleClick}>\r\n  <div className=\"player-name\">\r\n      <input type=\"text\" className=\"text-name-area\" placeholder=\"write your name and push button >>>\" autocomplete=\"new-password\"></input>\r\n      <button className=\"ready-button\" onClick={ () => {changeName({place}); changeStatusOnReady({place}); checkPlayersReadiness()}}></button>\r\n  </div>\r\n</div>\r\n\r\nconst readyPlayer = <div className=\"box-player\">\r\n   <div className=\"player-name\">\r\n<div className=\"other-player\">{places[place].name}</div>\r\n   </div>\r\n</div>\r\n\r\n  if(!places[place].id && !userId) {\r\n    return (\r\n      <div className=\"box-player\">\r\n         <button className=\"take-place\" onClick={takePlace.bind(undefined, {place})}>take place</button>\r\n      </div>\r\n    )\r\n  } else if (places[place].id === userId) {\r\n    if(!places[place].readinessStatus) {\r\n      return NotReadyPlayer\r\n    } else {\r\n      return readyPlayer\r\n    }\r\n  } else {\r\n    if(places[place].readinessStatus === true) {\r\n      return (\r\n        <div className=\"box-player green-board\">\r\n          <div className=\"player-name\">\r\n               <div className=\"other-player\">{places[place].name}</div>\r\n          </div> \r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"box-player\">\r\n          <div className=\"player-name\">\r\n               <div className=\"other-player\">{places[place].name}</div>\r\n          </div> \r\n        </div>\r\n      )\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nclass Game extends Component {\r\n  \r\n  handleClick (e) {\r\n    const target = e.target\r\n    if(target.classList.contains('ready-button')) {\r\n      e.currentTarget.style.border = '2px green solid';\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    const {handleClick} = this;\r\n    const {gameId, takePlace, userId, places, changeName, changeStatusOnReady, checkPlayersReadiness, role} = this.props\r\n    return (\r\n      <div className=\"room\">\r\n        <div className=\"room-box-chat\">\r\n          <div className=\"taimer\">Taimer</div>\r\n          <div className=\"chat\">\r\n            <div className=\"cahts\">\r\n              <button className=\"peace-chat\">Peace Chat</button>\r\n              <button className=\"mafia-chat\">Mafia Chat</button>\r\n            </div>\r\n            <div className=\"message-area\"></div>\r\n            <div className=\"message\">\r\n              <input type=\"text\" className=\"text-area\"></input>\r\n              <button>Send</button>\r\n            </div>\r\n                   <div className=\"role\">{role}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"room-box-players\">\r\n    <div className=\"room-id\">Game id: {gameId}</div>\r\n          <div className=\"players-box\">\r\n            <div className=\"players\">\r\n              <Place {...{takePlace, userId, places, place: 'player1', changeName, changeStatusOnReady, handleClick, checkPlayersReadiness}}/>\r\n              <Place {...{takePlace, userId, places, place: 'player2', changeName, changeStatusOnReady, handleClick, checkPlayersReadiness}}/>\r\n              <Place {...{takePlace, userId, places, place: 'player3', changeName, changeStatusOnReady, handleClick, checkPlayersReadiness}}/>\r\n              <Place {...{takePlace, userId, places, place: 'player4', changeName, changeStatusOnReady, handleClick, checkPlayersReadiness}}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;","import React, {Component, Fragment} from 'react';\r\nimport startPage from './startPage'\r\nimport Game from './gameRoom';\r\n\r\n\r\nconst DEFAULT_STATE = {\r\n  gameId: undefined,\r\n  status: undefined,\r\n  role: undefined,\r\n  readinessPlayersToStart: false,\r\n  userId: undefined,\r\n  places: undefined,\r\n}\r\n\r\nclass App extends Component {\r\n  constructor () {\r\n    super();\r\n    this.switchForShowRole = false;\r\n    this.state = {...DEFAULT_STATE};\r\n  }\r\n  \r\n  startGame = async () => {\r\n    const response = await fetch('/api/game', {method: 'POST'});\r\n    const {gameId, game} = await response.json();\r\n    const status = game._status;\r\n    const places = game._places;\r\n    this.setState({gameId, status, places});\r\n  }\r\n\r\n  connectToGame = async () => {\r\n    const id = document.querySelector('.text-gameId').value;\r\n    const response = await fetch(`/api/game/${id}`, {method: 'GET'});\r\n    const {game, gameId} = await response.json();\r\n    const status = game._status;\r\n    const places = game._places;\r\n    this.setState({status, gameId, places});\r\n  }\r\n\r\n  takePlace = async (player) => {\r\n    const response = await fetch(`/api/game/${this.state.gameId}/place`, \r\n  {\r\n    method: 'PUT', \r\n    headers: {'Content-Type': 'application/json'}, \r\n    body: JSON.stringify(player)\r\n  })\r\n    const {userId, game} = await response.json()\r\n    const places = game._places\r\n    this.setState({userId, places})\r\n  }\r\n  changeName = async (place) => {\r\n    const body = {\r\n      newName: document.querySelector('.text-name-area').value,\r\n      userId: this.state.userId,\r\n      place: place.place\r\n    };\r\n    const response = await fetch(`/api/game/${this.state.gameId}/userName`, {\r\n      method: 'PUT',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify(body)\r\n    })\r\n    const {game} = await response.json();\r\n    const places = game._places;\r\n    this.setState({places})\r\n  }\r\n  \r\n  changeStatusOnReady = async (place) => {\r\n    const response = await fetch(`/api/game/${this.state.gameId}/status`, {\r\n      method: 'PUT',\r\n      headers: {'Content-Type' : 'application/json'},\r\n      body: JSON.stringify({userId: this.state.userId, status: true, place: place.place})\r\n    });\r\n    const {game} = await response.json();\r\n    const places = game._places;\r\n    this.setState({places})\r\n  }\r\n\r\n  checkPlayersReadiness = async () => {\r\n    const response = await fetch(`/api/game/${this.state.gameId}/check`, {method: 'GET'});\r\n    console.log(response.status)\r\n    if (response.status === 200) { \r\n      const giveRoleResponse = await fetch(`/api/game/${this.state.gameId}/roles`, {method: 'PUT'});\r\n      const {game} = await giveRoleResponse.json()\r\n      const places = game._places;\r\n      const readinessPlayersToStart = true;\r\n      this.setState({places, readinessPlayersToStart});\r\n    }\r\n  }\r\n  showRole = async () => {\r\n    const response = await fetch(`/api/game/${this.state.gameId}/roles`, {\r\n      method: 'POST',\r\n      headers: {'Content-Type' : 'application/json'},\r\n      body: JSON.stringify({userId: this.state.userId})\r\n    });\r\n    const {role} = await response.json();\r\n    this.setState({role})\r\n  }\r\n  callShowRole (switchForShowRole, readinessPlayersToStart, showRole) {\r\n    if(!switchForShowRole && readinessPlayersToStart) {\r\n      showRole()\r\n      switchForShowRole = true;\r\n    }\r\n  }\r\n  render() {\r\n    \r\n    const {gameId, userId, places, role, readinessPlayersToStart} = this.state;\r\n    const {switchForShowRole, startGame, connectToGame, takePlace, changeName, changeStatusOnReady, checkPlayersReadiness, callShowRole, showRole} = this;\r\n\r\n    return (\r\n      <Fragment>\r\n      <div className=\"Wrraper\">\r\n        <div className=\"content\">\r\n          { !gameId ? startPage(startGame, connectToGame) : <Game {...{takePlace, gameId, userId, places, changeName, changeStatusOnReady, checkPlayersReadiness, role}}/> }\r\n        </div>\r\n        {callShowRole(switchForShowRole, readinessPlayersToStart, showRole)}\r\n        {console.log(this.state)}\r\n      </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}